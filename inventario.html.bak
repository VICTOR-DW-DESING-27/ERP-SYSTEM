<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Inventario - ERP System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .inventory-table th {
            padding: 0.75rem 1.5rem;
            background-color: #f9fafb;
            text-align: left;
            font-size: 0.75rem;
            font-weight: 500;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .inventory-table td {
            padding: 1rem 1.5rem;
            white-space: nowrap;
            font-size: 0.875rem;
            color: #6b7280;
        }
        .status-in-stock {
            padding: 0.125rem 0.5rem;
            display: inline-flex;
            font-size: 0.75rem;
            line-height: 1.25rem;
            font-weight: 600;
            border-radius: 9999px;
            background-color: #dcfce7;
            color: #166534;
        }
        .status-low-stock {
            padding: 0.125rem 0.5rem;
            display: inline-flex;
            font-size: 0.75rem;
            line-height: 1.25rem;
            font-weight: 600;
            border-radius: 9999px;
            background-color: #fef3c7;
            color: #92400e;
        }
        .status-out-of-stock {
            padding: 0.125rem 0.5rem;
            display: inline-flex;
            font-size: 0.75rem;
            line-height: 1.25rem;
            font-weight: 600;
            border-radius: 9999px;
            background-color: #fee2e2;
            color: #991b1b;
        }
        .btn-primary {
            background-color: #4f46e5;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: none;
            cursor: pointer;
            font-weight: 500;
        }
        .btn-primary:hover {
            background-color: #4338ca;
        }
        .btn-primary:focus {
            outline: 2px solid transparent;
            outline-offset: 2px;
            --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width, 0px) var(--tw-ring-offset-color, #fff);
            --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width, 0px)) var(--tw-ring-color);
            box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
            --tw-ring-opacity: 1;
            --tw-ring-color: rgb(99 102 241 / var(--tw-ring-opacity));
        }
        .btn-secondary {
            background-color: white;
            color: #374151;
            padding: 0.5rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            cursor: pointer;
            font-weight: 500;
        }
        .btn-secondary:hover {
            background-color: #f9fafb;
        }
        .btn-secondary:focus {
            outline: 2px solid transparent;
            outline-offset: 2px;
            --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width, 0px) var(--tw-ring-offset-color, #fff);
            --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width, 0px)) var(--tw-ring-color);
            box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
            --tw-ring-opacity: 1;
            --tw-ring-color: rgb(99 102 241 / var(--tw-ring-opacity));
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Navigation -->
    <div id="navbar"></div>

    <!-- Main Content -->
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <!-- Header Section -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div class="flex items-center space-x-3 mb-4 md:mb-0">
                <a href="index.html" class="text-indigo-600 hover:text-indigo-800 transition-colors duration-200 p-2 rounded-full hover:bg-indigo-50" title="Ir al Inicio">
                    <i class="fas fa-home text-xl"></i>
                </a>
                <div>
                    <h1 class="text-2xl md:text-3xl font-bold text-gray-800">Gestión de Inventario</h1>
                    <p class="text-sm text-gray-500">Administra y controla tu inventario de productos</p>
                </div>
            </div>
            <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 w-full md:w-auto">
                <div class="relative w-full sm:w-64">
                    <input 
                        id="searchProduct"
                        type="text" 
                        placeholder="Buscar productos..." 
                        class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        oninput="filterProducts(this.value)"
                    >
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                </div>
                <button onclick="showAddProductModal()" class="flex items-center justify-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <i class="fas fa-plus mr-2"></i>
                    <span>Nuevo Producto</span>
                </button>
            </div>
        </div>
                        <div class="flex items-center">
                            <img src="https://ui-avatars.com/api/?name=Usuario+Demo" alt="Usuario" class="w-8 h-8 rounded-full mr-2">
                            <span class="text-sm font-medium">Usuario Demo</span>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Inventory Content -->
            <main class="p-6">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-5 mb-8" id="inventory-stats">
            <!-- Total Products -->
            <div class="bg-gradient-to-br from-blue-50 to-white rounded-xl shadow-sm border border-blue-100 p-5 transition-all duration-300 hover:shadow-md">
                <div class="flex items-center">
                    <div class="p-3 rounded-xl bg-blue-100 text-blue-600 mr-4">
                        <i class="fas fa-box text-xl"></i>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Total Productos</p>
                        <div class="flex items-baseline justify-between">
                            <h3 class="text-2xl font-bold text-gray-800" id="total-products">0</h3>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                <i class="fas fa-arrow-up mr-1 text-green-500" id="total-trend-icon"></i>
                                <span id="total-products-trend">0%</span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- In Stock -->
            <div class="bg-gradient-to-br from-green-50 to-white rounded-xl shadow-sm border border-green-100 p-5 transition-all duration-300 hover:shadow-md">
                <div class="flex items-center">
                    <div class="p-3 rounded-xl bg-green-100 text-green-600 mr-4">
                        <i class="fas fa-check-circle text-xl"></i>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">En Stock</p>
                        <div class="flex items-baseline justify-between">
                            <h3 class="text-2xl font-bold text-gray-800" id="in-stock-count">0</h3>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                <i class="fas fa-arrow-up mr-1 text-green-500" id="in-stock-trend-icon"></i>
                                <span id="in-stock-trend">0%</span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Low Stock -->
            <div class="bg-gradient-to-br from-yellow-50 to-white rounded-xl shadow-sm border border-yellow-100 p-5 transition-all duration-300 hover:shadow-md">
                <div class="flex items-center">
                    <div class="p-3 rounded-xl bg-yellow-100 text-yellow-600 mr-4">
                        <i class="fas fa-exclamation-triangle text-xl"></i>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Poco Stock</p>
                        <div class="flex items-baseline justify-between">
                            <h3 class="text-2xl font-bold text-gray-800" id="low-stock-count">0</h3>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                                <i class="fas fa-arrow-up mr-1 text-yellow-500" id="low-stock-trend-icon"></i>
                                <span id="low-stock-trend">0</span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Out of Stock -->
            <div class="bg-gradient-to-br from-red-50 to-white rounded-xl shadow-sm border border-red-100 p-5 transition-all duration-300 hover:shadow-md">
                <div class="flex items-center">
                    <div class="p-3 rounded-xl bg-red-100 text-red-600 mr-4">
                        <i class="fas fa-times-circle text-xl"></i>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Agotado</p>
                        <div class="flex items-baseline justify-between">
                            <h3 class="text-2xl font-bold text-gray-800" id="out-of-stock-count">0</h3>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                <i class="fas fa-arrow-up mr-1 text-red-500" id="out-of-stock-trend-icon"></i>
                                <span id="out-of-stock-trend">0</span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Actions -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-4 mb-6">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                    <div class="relative">
                        <select class="appearance-none bg-white border border-gray-300 text-gray-700 py-2 pl-4 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                            <option>Todas las categorías</option>
                            <option>Electrónicos</option>
                            <option>Ropa</option>
                            <option>Alimentos</option>
                            <option>Hogar</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <i class="fas fa-chevron-down text-xs"></i>
                        </div>
                    </div>
                    <div class="relative">
                        <select class="appearance-none bg-white border border-gray-300 text-gray-700 py-2 pl-4 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                            <option>Ordenar por: Más recientes</option>
                            <option>Ordenar por: Nombre (A-Z)</option>
                            <option>Ordenar por: Stock (bajo a alto)</option>
                            <option>Ordenar por: Precio (bajo a alto)</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <i class="fas fa-sort text-xs"></i>
                        </div>
                    </div>
                </div>
                <div class="flex space-x-3">
                    <button class="flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
                        <i class="fas fa-file-export mr-2 text-gray-500"></i>
                        <span>Exportar</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Products Table -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Producto</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Categoría</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Código</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Stock</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Precio</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Estado</span>
                                    <button class="ml-1 text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-sort"></i>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Acciones
                            </th>
                        </tr>
                    </thead>
                            <tbody class="bg-white divide-y divide-gray-200" id="products-table-body">
                                <!-- Los productos se cargarán aquí con JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <!-- Pagination -->
                    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Anterior
                            </a>
                            <a href="#" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Siguiente
                            </a>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Mostrando <span class="font-medium">1</span> a <span class="font-medium">10</span> de <span class="font-medium">1,234</span> productos
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Anterior</span>
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                    <a href="#" aria-current="page" class="z-10 bg-indigo-50 border-indigo-500 text-indigo-600 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                        1
                                    </a>
                                    <a href="#" class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                        2
                                    </a>
                                    <a href="#" class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                        3
                                    </a>
                                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                        ...
                                    </span>
                                    <a href="#" class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                        124
                                    </a>
                                    <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Siguiente</span>
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div id="addProductModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" onclick="closeAddProductModal()"></div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modal-title">Agregar Nuevo Producto</h3>
                            <form id="addProductForm" onsubmit="return addProduct(event)">
                                <!-- Imagen del Producto -->
                                <div class="mb-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Imagen del Producto</label>
                                    <div class="mt-1 flex items-center">
                                        <span class="inline-block h-12 w-12 rounded-full overflow-hidden bg-gray-100">
                                            <img id="productImagePreview" src="" alt="" class="h-full w-full object-cover" style="display: none;">
                                            <svg id="defaultImagePreview" class="h-full w-full text-gray-300" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                                            </svg>
                                        </span>
                                        <div class="ml-4">
                                            <input type="file" id="productImage" name="productImage" accept="image/*" class="hidden" onchange="handleImageUpload(event)">
                                            <button type="button" onclick="document.getElementById('productImage').click()" class="ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                                Cambiar
                                            </button>
                                            <p class="text-xs text-gray-500 mt-1">PNG, JPG, GIF hasta 5MB</p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Línea de Producto -->
                                <div class="mb-4">
                                    <label for="productLine" class="block text-sm font-medium text-gray-700 mb-1">Línea de Producto</label>
                                    <input type="text" id="productLine" name="productLine" required
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                </div>

                                <!-- Nombre del Producto -->
                                <div class="mb-4">
                                    <label for="productName" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Producto</label>
                                    <input type="text" id="productName" name="productName" required 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                </div>
                                <!-- Códigos y Categoría -->
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <label for="productInternalCode" class="block text-sm font-medium text-gray-700 mb-1">Código Interno</label>
                                        <input type="text" id="productInternalCode" name="productInternalCode" required
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                               placeholder="Ej: INT-001">
                                    </div>
                                    <div>
                                        <label for="productCode" class="block text-sm font-medium text-gray-700 mb-1">Código de Producto</label>
                                        <input type="text" id="productCode" name="productCode" required
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                               placeholder="Ej: PROD-001">
                                    </div>
                                    <div>
                                        <label for="productCategory" class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
                                        <select id="productCategory" name="productCategory" required
                                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                            <option value="">Seleccionar categoría</option>
                                            <option value="Electrónicos">Electrónicos</option>
                                            <option value="Ropa">Ropa</option>
                                            <option value="Alimentos">Alimentos</option>
                                            <option value="Hogar">Hogar</option>
                                            <option value="Oficina">Oficina</option>
                                            <option value="Salud y Belleza">Salud y Belleza</option>
                                            <option value="Deportes">Deportes</option>
                                            <option value="Juguetes">Juguetes</option>
                                            <option value="Otros">Otros</option>
                                        </select>
                                    </div>
                                </div>
                                <!-- Stock Mínimo, Máximo y Actual -->
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <label for="productMinStock" class="block text-sm font-medium text-gray-700 mb-1">Stock Mínimo</label>
                                        <div class="mt-1 relative rounded-md shadow-sm">
                                            <input type="number" id="productMinStock" name="productMinStock" min="0" required
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   placeholder="0">
                                        </div>
                                    </div>
                                    <div>
                                        <label for="productMaxStock" class="block text-sm font-medium text-gray-700 mb-1">Stock Máximo</label>
                                        <div class="mt-1 relative rounded-md shadow-sm">
                                            <input type="number" id="productMaxStock" name="productMaxStock" min="0" required
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   placeholder="0">
                                        </div>
                                    </div>
                                    <div>
                                        <label for="productStock" class="block text-sm font-medium text-gray-700 mb-1">Stock Actual</label>
                                        <div class="mt-1 relative rounded-md shadow-sm">
                                            <input type="number" id="productStock" name="productStock" min="0" required
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   onchange="updateMercadoLibrePrice()">
                                        </div>
                                    </div>
                                    <div>
                                        <label for="productCost" class="block text-sm font-medium text-gray-700 mb-1">Precio de Costo ($)</label>
                                        <div class="relative rounded-md shadow-sm">
                                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <span class="text-gray-500 sm:text-sm">$</span>
                                            </div>
                                            <input type="number" id="productCost" name="productCost" min="0" step="0.01" required
                                                   class="w-full pl-7 pr-12 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   placeholder="0.00" onchange="updateMercadoLibrePrice()">
                                        </div>
                                    </div>
                                    <div>
                                        <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-1">Precio de Venta ($)</label>
                                        <div class="relative rounded-md shadow-sm">
                                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <span class="text-gray-500 sm:text-sm">$</span>
                                            </div>
                                            <input type="number" id="productPrice" name="productPrice" min="0" step="0.01" required
                                                   class="block w-full pl-7 pr-12 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   onchange="updateMercadoLibrePrice()">
                                        </div>
                                    </div>
                                    <div>
                                        <label for="productStatus" class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
                                        <select id="productStatus" name="productStatus" required
                                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                            <option value="in-stock">En Stock</option>
                                            <option value="low-stock">Poco Stock</option>
                                            <option value="out-of-stock">Sin Stock</option>
                                            <option value="pre-order">Pre-orden</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Sección de Precios -->
                                <div class="border-t border-gray-200 pt-4 mb-4">
                                    <h4 class="text-sm font-medium text-gray-700 mb-3">Configuración de Precios</h4>
                                    
                                    <!-- Precio en USD y Tasa BCV -->
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                        <div class="md:col-span-2">
                                            <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-1">Precio en USD</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500 sm:text-sm">$</span>
                                                </div>
                                                <input type="number" id="productPrice" name="productPrice" step="0.01"
                                                       class="block w-full pl-10 pr-12 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                       oninput="updateMercadoLibrePrice()"
                                                       placeholder="0.00">
                                            </div>
                                        </div>
                                        <div>
                                            <label for="exchangeRate" class="block text-sm font-medium text-gray-700 mb-1">Tasa BCV (Bs./$)</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <input type="number" id="exchangeRate" name="exchangeRate" step="0.0001"
                                                       class="block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                       oninput="updateMercadoLibrePrice()"
                                                       onchange="updateMercadoLibrePrice()"
                                                       placeholder="Ej: 36.50">
                                                <div class="absolute inset-y-0 right-0 pr-10 flex items-center">
                                                    <span class="text-gray-500 text-xs">Bs./$</span>
                                                </div>
                                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                                                    <button type="button" 
                                                            onclick="fetchBCVRate()" 
                                                            class="text-indigo-600 hover:text-indigo-800 transition-colors duration-200"
                                                            title="Actualizar tasa BCV">
                                                        <i class="fas fa-sync-alt"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Precios en Bs. y USD -->
                                    <div class="grid grid-cols-1 gap-4 mb-4">
                                        <div>
                                            <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-1">Precio en USD</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500 sm:text-sm">$</span>
                                                </div>
                                                <input type="number" id="productPrice" name="productPrice" step="0.01"
                                                       class="block w-full pl-10 pr-12 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                       oninput="updateMercadoLibrePrice()"
                                                       placeholder="0.00">
                                            </div>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Precio en Bs.</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500 sm:text-sm">Bs.</span>
                                                </div>
                                                <input type="text" id="productPriceVes" name="productPriceVes" 
                                                       class="block w-full pl-14 pr-12 py-2 border border-gray-300 bg-gray-50 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" 
                                                       placeholder="0.00" readonly>
                                            </div>
                                            <p class="mt-1 text-xs text-gray-600">
                                                Equivalente: <span id="usdEquivalent" class="font-medium">$0.00</span> | 
                                                Tasa BCV: <span id="currentRate" class="font-medium">0.00</span> Bs./$
                                            </p>
                                        </div>
                                    </div>

                                    <!-- Porcentajes de Precio -->
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                        <div>
                                            <label for="minPricePercentage" class="block text-sm font-medium text-gray-700 mb-1">Margen Mínimo (%)</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <input type="number" id="minPricePercentage" name="minPricePercentage" 
                                                       min="0" max="1000" step="0.1" value="30"
                                                       class="block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                       onchange="updateMercadoLibrePrice()">
                                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500 text-sm">%</span>
                                                </div>
                                            </div>
                                            <p class="mt-1 text-xs text-gray-600">
                                                Mínimo: <span id="minPriceDisplay" class="font-medium">Bs. 0.00</span>
                                            </p>
                                        </div>
                                        <div>
                                            <label for="maxPricePercentage" class="block text-sm font-medium text-gray-700 mb-1">Margen Máximo (%)</label>
                                            <div class="relative rounded-md shadow-sm">
                                                <input type="number" id="maxPricePercentage" name="maxPricePercentage" 
                                                       min="0" max="1000" step="0.1" value="50"
                                                       class="block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                       onchange="updateMercadoLibrePrice()">
                                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500 text-sm">%</span>
                                                </div>
                                            </div>
                                            <p class="mt-1 text-xs text-gray-600">
                                                Máx. ML: <span id="maxPriceDisplay" class="font-medium">Bs. 0.00</span>
                                            </p>
                                        </div>
                                    </div>

                                    <!-- Precio MercadoLibre -->
                                    <div class="mb-2">
                                        <div class="flex justify-between items-center mb-1">
                                            <label for="productPriceML" class="block text-sm font-medium text-gray-700">Precio en MercadoLibre</label>
                                            <div class="flex items-center">
                                                <input type="checkbox" id="autoCalculateML" name="autoCalculateML" checked
                                                       class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                                       onchange="updateMercadoLibrePrice()">
                                                <label for="autoCalculateML" class="ml-2 block text-xs text-gray-600">Cálculo automático</label>
                                            </div>
                                        </div>
                                        <div class="relative rounded-md shadow-sm">
                                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <span class="text-gray-500 sm:text-sm">Bs.</span>
                                            </div>
                                            <input type="text" id="productPriceML" name="productPriceML" 
                                                   class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-14 pr-12 sm:text-sm border-gray-300 rounded-md" 
                                                   placeholder="0.00" onchange="autoCalculateML = false;">
                                            <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                                                <span id="mlLastUpdate" class="text-xs text-gray-500"></span>
                                            </div>
                                        </div>
                                        <p id="priceRangeInfo" class="mt-1 text-xs text-gray-500">
                                            <span>Precio sugerido basado en el margen máximo</span>
                                            <span id="mlLastUpdate" class="text-gray-400 float-right"></span>
                                        </p>
                                    </div>
                                </div>

                                <!-- Descripción -->
                                <div class="mb-4">
                                    <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                                    <textarea id="productDescription" name="productDescription" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                              placeholder="Incluya detalles importantes como características, especificaciones, etc."></textarea>
                                </div>
                                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                                        Guardar Producto
                                    </button>
                                    <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                        Cancelar
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Load navbar
        fetch('components/shared/navbar.html')
            .then(response => response.text())
            .then(data => {
                document.getElementById('navbar').innerHTML = data;
                // Highlight current page in navigation
                const currentPage = window.location.pathname.split('/').pop() || 'index.html';
                document.querySelectorAll('nav a').forEach(link => {
                    if (link.getAttribute('href') === currentPage) {
                        link.classList.add('text-blue-400', 'font-semibold');
                    }
                });
            });

        // Variable global para almacenar los productos
        let products = [];
        let allProducts = []; // Almacena todos los productos sin filtrar
        
        // Función para filtrar productos según el término de búsqueda
        function filterProducts(searchTerm) {
            if (!searchTerm || searchTerm.trim() === '') {
                // Si no hay término de búsqueda, mostrar todos los productos
                products = [...allProducts];
            } else {
                // Filtrar productos que coincidan con el término de búsqueda
                const term = searchTerm.toLowerCase().trim();
                products = allProducts.filter(product => 
                    (product.name && product.name.toLowerCase().includes(term)) ||
                    (product.code && product.code.toLowerCase().includes(term)) ||
                    (product.category && product.category.toLowerCase().includes(term)) ||
                    (product.description && product.description.toLowerCase().includes(term))
                );
            }
            // Actualizar la tabla con los productos filtrados
            loadProducts();
        }
        
        // Función para cargar todos los productos desde localStorage
        function loadAllProducts() {
            try {
                const savedProducts = localStorage.getItem('inventoryProducts');
                if (savedProducts) {
                    allProducts = JSON.parse(savedProducts);
                    products = [...allProducts];
                    updateInventoryStats();
                    loadProducts();
                }
            } catch (error) {
                console.error('Error al cargar productos:', error);
                showNotification('Error al cargar los productos', 'error');
            }
        }
        
        // Función para guardar productos en localStorage
        function saveProducts() {
            try {
                localStorage.setItem('inventoryProducts', JSON.stringify(products));
                updateInventoryStats();
                loadProducts(); // Recargar la tabla después de guardar
                console.log('Productos guardados:', products.length);
            } catch (error) {
                console.error('Error al guardar productos:', error);
                showNotification('Error al guardar los productos', 'error');
            }
        }
        
        // Función para cargar los productos en la tabla
        function loadProducts() {
            const tbody = document.getElementById('products-table-body');
            if (!tbody) return;

            // Mostrar mensaje si no hay productos
            if (products.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="px-6 py-12 text-center text-gray-500">
                            <div class="flex flex-col items-center justify-center">
                                <i class="fas fa-box-open text-4xl text-gray-300 mb-2"></i>
                                <p class="text-lg font-medium text-gray-700">No hay productos registrados</p>
                                <p class="text-sm text-gray-500 mt-1">Comienza agregando tu primer producto</p>
                                <button onclick="showAddProductModal()" class="mt-4 px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <i class="fas fa-plus mr-2"></i>Agregar Producto
                                </button>
                            </div>
                        </td>
                    </tr>`;
                return;
            }
            
            // Limpiar la tabla
            tbody.innerHTML = '';
            
            // Agregar cada producto a la tabla
            products.forEach(product => {
                const row = document.createElement('tr');
                
                // Determinar el color del estado
                let statusClass = '';
                let statusText = '';
                
                switch(product.status) {
                    case 'in-stock':
                        statusClass = 'bg-green-100 text-green-800';
                        statusText = 'En Stock';
                        break;
                    case 'low-stock':
                        statusClass = 'bg-yellow-100 text-yellow-800';
                        statusText = 'Poco Stock';
                        break;
                    case 'out-of-stock':
                        statusClass = 'bg-red-100 text-red-800';
                        statusText = 'Sin Stock';
                        break;
                    default:
                        statusClass = 'bg-gray-100 text-gray-800';
                        statusText = product.status;
                }
                
                // Formatear precios
                const priceFormatted = new Intl.NumberFormat('es-VE', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(product.price || 0);
                
                const priceVesFormatted = new Intl.NumberFormat('es-VE', {
                    style: 'currency',
                    currency: 'VES',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(product.priceVes || 0);
                
                // Formatear precio de costo
                const costFormatted = new Intl.NumberFormat('es-VE', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(product.cost || 0);
                
                // Crear fila de la tabla
                row.innerHTML = `
                    <td class="px-4 py-3 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-md flex items-center justify-center">
                                <i class="fas fa-box text-gray-400"></i>
                            </div>
                            <div class="ml-3">
                                <div class="text-sm font-medium text-gray-900 truncate" style="max-width: 200px;" title="${product.name || 'Sin nombre'}">
                                    ${product.name || 'Sin nombre'}
                                </div>
                                <div class="text-xs text-gray-500">${product.internalCode || 'Sin código'}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500">
                        ${product.category || 'N/A'}
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                            ${product.code || 'N/A'}
                        </span>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                        <div class="font-medium">${product.stock || 0}</div>
                        <div class="text-xs text-gray-400">
                            Min: ${product.minStock || 0} | Max: ${product.maxStock || 0}
                        </div>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500">
                        <div class="text-xs text-gray-400">Costo:</div>
                        <div class="font-medium">${costFormatted}</div>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500">
                        <div class="text-xs text-gray-400">Venta:</div>
                        <div class="font-medium">${priceFormatted}</div>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                            ${statusText}
                        </span>
                    </td>
                    <td class="px-3 py-3 whitespace-nowrap text-right text-sm font-medium">
                        <div class="flex items-center justify-end space-x-2">
                            <button onclick="viewProduct('${product.id}'); event.stopPropagation();" 
                                    class="text-blue-600 hover:text-blue-900 p-1" 
                                    title="Ver detalles">
                                <i class="far fa-eye"></i>
                            </button>
                            <button onclick="viewProduct('${product.id}', true); event.stopPropagation();" 
                                    class="text-indigo-600 hover:text-indigo-900 p-1" 
                                    title="Editar">
                                <i class="far fa-edit"></i>
                            </button>
                            <button onclick="deleteProduct('${product.id}'); event.stopPropagation();" 
                                    class="text-red-600 hover:text-red-900" 
                                    title="Eliminar">
                                <i class="far fa-trash-alt"></i>
                            </button>
                        </div>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }
        
        // Función para ver/editar un producto
        function viewProduct(productId, editMode = false) {
            const product = products.find(p => p.id === productId);
            if (!product) {
                showNotification('Producto no encontrado', 'error');
                return;
            }
            
            // Establecer el ID del producto en edición
            editingProductId = productId;
            
            // Llenar el formulario con los datos del producto
            document.getElementById('productName').value = product.name || '';
            document.getElementById('productLine').value = product.line || '';
            document.getElementById('productInternalCode').value = product.internalCode || '';
            document.getElementById('productCategory').value = product.category || '';
            document.getElementById('productCode').value = product.code || '';
            document.getElementById('productStock').value = product.stock || 0;
            document.getElementById('productMinStock').value = product.minStock || 0;
            document.getElementById('productMaxStock').value = product.maxStock || 0;
            document.getElementById('productCost').value = product.cost || 0;
            document.getElementById('productPrice').value = product.price || 0;
            document.getElementById('productPriceVes').value = product.priceVes || 0;
            document.getElementById('productStatus').value = product.status || 'in-stock';
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('minPricePercentage').value = product.minPercentage || 30;
            document.getElementById('maxPricePercentage').value = product.maxPercentage || 50;
            document.getElementById('productPriceML').value = product.priceML || 0;
            document.getElementById('exchangeRate').value = product.exchangeRate || 0;
            
            // Configurar la imagen si existe
            const imagePreview = document.getElementById('productImagePreview');
            const defaultPreview = document.getElementById('defaultImagePreview');
            if (product.image) {
                imagePreview.src = product.image;
                imagePreview.style.display = 'block';
                defaultPreview.style.display = 'none';
            } else {
                imagePreview.style.display = 'none';
                defaultPreview.style.display = 'block';
            }
            
            // Configurar el modal
            const modal = document.getElementById('addProductModal');
            const modalTitle = modal.querySelector('#modal-title');
            const form = document.getElementById('addProductForm');
            
            if (editMode) {
                modalTitle.textContent = `Editar Producto: ${product.name || 'Sin nombre'}`;
                
                // Habilitar todos los campos del formulario
                const formInputs = form.querySelectorAll('input, select, textarea, button');
                formInputs.forEach(input => {
                    input.disabled = false;
                });
                
                // Configurar botones del formulario
                const modalFooter = modal.querySelector('.bg-gray-50');
                modalFooter.innerHTML = `
                    <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Guardar Cambios
                    </button>
                `;
            } else {
                modalTitle.textContent = `Ver Producto: ${product.name || 'Sin nombre'}`;
                
                // Deshabilitar todos los campos del formulario
                const formInputs = form.querySelectorAll('input, select, textarea, button');
                formInputs.forEach(input => {
                    input.disabled = true;
                });
                
                // Mostrar solo el botón de cerrar
                const modalFooter = modal.querySelector('.bg-gray-50');
                modalFooter.innerHTML = `
                    <button type="button" onclick="closeAddProductModal()" class="w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Cerrar
                    </button>
                `;
            }
            
            // Mostrar el modal
            modal.classList.remove('hidden');
            document.body.classList.add('modal-open');
        }

        // Mostrar el modal de agregar producto
        function showAddProductModal(productId = null) {
            // Restablecer el formulario
            const form = document.getElementById('addProductForm');
            form.reset();
            
            // Restablecer la imagen
            const imagePreview = document.getElementById('productImagePreview');
            const defaultPreview = document.getElementById('defaultImagePreview');
            imagePreview.style.display = 'none';
            defaultPreview.style.display = 'block';
            currentProductImage = null;
            
            // Configurar el modal para nuevo producto
            const modal = document.getElementById('addProductModal');
            const modalTitle = modal.querySelector('#modal-title');
            const modalFooter = modal.querySelector('.bg-gray-50');
            
            if (productId) {
                modalTitle.textContent = 'Editar Producto';
                
                // Llenar el formulario con los datos del producto
                const product = products.find(p => p.id === productId);
                document.getElementById('productName').value = product.name || '';
                document.getElementById('productLine').value = product.line || '';
                document.getElementById('productInternalCode').value = product.internalCode || '';
                document.getElementById('productCategory').value = product.category || '';
                document.getElementById('productCode').value = product.code || '';
                document.getElementById('productStock').value = product.stock || 0;
                document.getElementById('productMinStock').value = product.minStock || 0;
                document.getElementById('productMaxStock').value = product.maxStock || 0;
                document.getElementById('productCost').value = product.cost || 0;
                document.getElementById('productPrice').value = product.price || 0;
                document.getElementById('productPriceVes').value = product.priceVes || 0;
                document.getElementById('productStatus').value = product.status || 'in-stock';
                document.getElementById('productDescription').value = product.description || '';
                document.getElementById('minPricePercentage').value = product.minPercentage || 30;
                document.getElementById('maxPricePercentage').value = product.maxPercentage || 50;
                document.getElementById('productPriceML').value = product.priceML || 0;
                document.getElementById('exchangeRate').value = product.exchangeRate || 0;
                
                // Configurar la imagen si existe
                const imagePreview = document.getElementById('productImagePreview');
                const defaultPreview = document.getElementById('defaultImagePreview');
                if (product.image) {
                    imagePreview.src = product.image;
                    imagePreview.style.display = 'block';
                    defaultPreview.style.display = 'none';
                } else {
                    imagePreview.style.display = 'none';
                    defaultPreview.style.display = 'block';
                }
                
                // Configurar botones del formulario
                modalFooter.innerHTML = `
                    <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Guardar Cambios
                    </button>
                `;
            } else {
                modalTitle.textContent = 'Agregar Nuevo Producto';
                
                // Configurar botones del formulario
                modalFooter.innerHTML = `
                    <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Guardar Producto
                    </button>
                `;
            }
            
            // Mostrar el modal
            modal.classList.remove('hidden');
            document.body.classList.add('modal-open');
        }

        // Cerrar el modal de agregar producto
        function closeAddProductModal() {
            try {
                // Ocultar el modal
                const modal = document.getElementById('addProductModal');
                modal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
                
                // Resetear el formulario
                const form = document.getElementById('addProductForm');
                if (form) {
                    form.reset();
                }
                
                // Resetear la vista previa de la imagen
                const preview = document.getElementById('productImagePreview');
                const defaultPreview = document.getElementById('defaultImagePreview');
                const fileInput = document.getElementById('productImage');
                
                if (preview) {
                    preview.src = '';
                    preview.style.display = 'none';
                }
                if (defaultPreview) {
                    defaultPreview.style.display = 'block';
                }
                if (fileInput) {
                    fileInput.value = '';
                }
                
                // Limpiar la imagen actual
                currentProductImage = null;
                
                // Limpiar el ID del producto en edición
                editingProductId = null;
                
                // Habilitar todos los campos del formulario por si estaban deshabilitados
                const formInputs = form?.querySelectorAll('input, select, textarea, button');
                if (formInputs) {
                    formInputs.forEach(input => {
                        input.disabled = false;
                    });
                }
                
                // Restaurar el título del modal
                const modalTitle = modal?.querySelector('#modal-title');
                if (modalTitle) {
                    modalTitle.textContent = 'Agregar Nuevo Producto';
                }
                
                // Restaurar los botones del pie del modal
                const modalFooter = modal?.querySelector('.bg-gray-50');
                if (modalFooter) {
                    modalFooter.innerHTML = `
                        <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                            Cancelar
                        </button>
                        <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                            Guardar Producto
                        </button>
                    `;
                }
            } catch (error) {
                console.error('Error al cerrar el modal:', error);
            }
        }

        // Cerrar el modal al presionar ESC
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeAddProductModal();
            }
        });

        // Agregar o actualizar un producto
        function addProduct(event) {
            event.preventDefault();
            
            try {
                // Validar campos requeridos
                const requiredFields = ['productName', 'productCode', 'productPrice'];
                for (const fieldId of requiredFields) {
                    const field = document.getElementById(fieldId);
                    if (!field.value.trim()) {
                        field.focus();
                        showNotification(`Por favor complete el campo: ${field.placeholder || field.name || fieldId.replace('product', '')}`, 'error');
                        return false;
                    }
                }

                // Obtener el ID del producto (nuevo o existente)
                const productId = editingProductId || 'product-' + Date.now();
                
                // Obtener los valores del formulario
                const product = {
                    id: productId,
                    name: document.getElementById('productName').value.trim(),
                    line: document.getElementById('productLine').value.trim(),
                    internalCode: document.getElementById('productInternalCode').value.trim(),
                    category: document.getElementById('productCategory').value.trim(),
                    code: document.getElementById('productCode').value.trim(),
                    stock: parseInt(document.getElementById('productStock').value) || 0,
                    minStock: parseInt(document.getElementById('productMinStock').value) || 0,
                    maxStock: parseInt(document.getElementById('productMaxStock').value) || 0,
                    cost: parseFloat(document.getElementById('productCost').value) || 0,
                    price: parseFloat(document.getElementById('productPrice').value) || 0,
                    status: document.getElementById('productStatus').value,
                    description: document.getElementById('productDescription').value.trim(),
                    minPercentage: parseFloat(document.getElementById('minPricePercentage').value) || 30,
                    maxPercentage: parseFloat(document.getElementById('maxPricePercentage').value) || 50,
                    priceVes: parseFloat(document.getElementById('productPriceVes').value) || 0,
                    priceML: parseFloat(document.getElementById('productPriceML').value) || 0,
                    exchangeRate: parseFloat(document.getElementById('exchangeRate').value) || 0,
                    lastUpdated: new Date().toISOString()
                };
                
                console.log('Guardando producto:', product);
                
                // Función para guardar el producto
                const saveProduct = (imageData = null) => {
                    try {
                        // Si hay una imagen, agregarla al producto
                        if (imageData) {
                            product.image = imageData;
                        }
                        
                        // Cargar productos existentes
                        const existingProducts = JSON.parse(localStorage.getItem('products')) || [];
                        const existingIndex = existingProducts.findIndex(p => p.id === productId);
                        
                        // Verificar si ya existe un producto con el mismo código (excepto el actual)
                        const duplicateCode = existingProducts.find(p => p.code === product.code && p.id !== productId);
                        if (duplicateCode) {
                            showNotification('Ya existe un producto con este código', 'error');
                            document.getElementById('productCode').focus();
                            return false;
                        }
                        
                        // Actualizar o agregar el producto
                        if (existingIndex !== -1) {
                            // Mantener la imagen existente si no se está actualizando
                            if (!imageData && existingProducts[existingIndex].image) {
                                product.image = existingProducts[existingIndex].image;
                            }
                            existingProducts[existingIndex] = product;
                            showNotification('Producto actualizado correctamente', 'success');
                        } else {
                            existingProducts.push(product);
                            showNotification('Producto agregado correctamente', 'success');
                        }
                        
                        // Guardar en localStorage
                        localStorage.setItem('products', JSON.stringify(existingProducts));
                        
                        // Actualizar la variable global y la interfaz
                        products = existingProducts;
                        loadProducts();
                        updateInventoryStats();
                        
                        // Cerrar el modal
                        closeAddProductModal();
                        
                        // Limpiar el ID de edición
                        editingProductId = null;
                        
                        return true;
                    } catch (error) {
                        console.error('Error al guardar el producto:', error);
                        showNotification('Error al guardar el producto: ' + (error.message || 'Error desconocido'), 'error');
                        return false;
                    }
                };
                
                // Si hay una imagen, procesarla primero
                if (currentProductImage) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        saveProduct(e.target.result);
                    };
                    reader.onerror = function() {
                        showNotification('Error al procesar la imagen', 'error');
                    };
                    reader.readAsDataURL(currentProductImage);
                } else {
                    // Si no hay imagen nueva, guardar directamente
                    saveProduct();
                }
                
            } catch (error) {
                console.error('Error al guardar el producto:', error);
                showNotification('Error al guardar el producto: ' + (error.message || 'Error desconocido'), 'error');
            }
            
            return false;
        }

        // Variables globales
        let autoCalculateML = true;
        const ML_MARGIN = 1.10; // 10% de margen para MercadoLibre
        let currentProductImage = null;
        let editingProductId = null; // Variable para rastrear el ID del producto en edición

        // Manejar la subida de imágenes
        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            // Validar tamaño máximo (5MB)
            const maxSize = 5 * 1024 * 1024; // 5MB
            if (file.size > maxSize) {
                showNotification('La imagen es demasiado grande. El tamaño máximo permitido es 5MB.', 'error');
                return;
            }
            
            // Validar tipo de archivo
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                showNotification('Por favor, sube un archivo de imagen válido (JPEG, PNG o GIF).', 'error');
                return;
            }
            
            // Mostrar vista previa
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('productImagePreview');
                const defaultPreview = document.getElementById('defaultImagePreview');
                
                preview.src = e.target.result;
                preview.style.display = 'block';
                defaultPreview.style.display = 'none';
                
                // Guardar la imagen para enviar con el formulario
                currentProductImage = file;
            };
            reader.readAsDataURL(file);
        }

        // Función para actualizar las estadísticas
        function updateInventoryStats() {
            // Contar productos por estado y analizar niveles de stock
            const stats = {
                total: products.length,
                inStock: products.filter(p => p.status === 'in-stock').length,
                lowStock: products.filter(p => p.status === 'low-stock').length,
                outOfStock: products.filter(p => p.status === 'out-of-stock').length,
                belowMinStock: products.filter(p => p.stock < (p.minStock || 0)).length,
                aboveMaxStock: products.filter(p => p.stock > (p.maxStock || 0)).length,
                inOptimalRange: products.filter(p => (p.stock >= (p.minStock || 0) && p.stock <= (p.maxStock || Infinity))).length,
                totalInventoryValue: products.reduce((sum, p) => sum + ((p.stock || 0) * (p.cost || 0)), 0)
            };
            
            // Actualizar total de productos
            document.getElementById('total-products').textContent = stats.total.toLocaleString();
            
            // Actualizar productos en stock
            document.getElementById('in-stock-count').textContent = stats.inStock.toLocaleString();
            
            // Actualizar productos con poco stock
            document.getElementById('low-stock-count').textContent = stats.lowStock.toLocaleString();
            
            // Actualizar productos agotados
            document.getElementById('out-of-stock-count').textContent = stats.outOfStock.toLocaleString();
            
            // Actualizar estadísticas de niveles de stock
            const belowMinElement = document.getElementById('below-min-stock-count');
            const aboveMaxElement = document.getElementById('above-max-stock-count');
            const optimalRangeElement = document.getElementById('optimal-range-count');
            const inventoryValueElement = document.getElementById('inventory-value');
            
            if (belowMinElement) belowMinElement.textContent = stats.belowMinStock.toLocaleString();
            if (aboveMaxElement) aboveMaxElement.textContent = stats.aboveMaxStock.toLocaleString();
            if (optimalRangeElement) optimalRangeElement.textContent = stats.inOptimalRange.toLocaleString();
            if (inventoryValueElement) {
                inventoryValueElement.textContent = new Intl.NumberFormat('es-VE', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(stats.totalInventoryValue);
            }
            
            // Calcular tendencias (ejemplo estático - en producción usar datos históricos)
            const updateTrend = (elementId, current, previous = 0) => {
                const change = current - previous;
                const element = document.getElementById(elementId);
                if (!element) return;
                
                if (elementId.includes('trend')) {
                    const isPercentage = elementId.includes('trend') && !elementId.includes('low-stock');
                    const isPositive = change >= 0;
                    const symbol = isPositive ? '+' : '';
                    const value = isPercentage 
                        ? Math.round((change / (previous || 1)) * 100) 
                        : change;
                    const suffix = isPercentage ? '%' : '';
                    
                    element.textContent = `${symbol}${value}${suffix} desde ayer`;
                    element.className = `text-${isPositive ? 'green' : 'red'}-500 text-sm`;
                }
            };
            
            // Actualizar tendencias (usando 0 como valor anterior por defecto)
            updateTrend('total-products-trend', stats.total, 0);
            updateTrend('in-stock-trend', stats.inStock, 0);
            updateTrend('low-stock-trend', stats.lowStock, 0);
            updateTrend('out-of-stock-trend', stats.outOfStock, 0);
        }

        // Función para eliminar un producto
        function deleteProduct(productId) {
            if (confirm('¿Estás seguro de que deseas eliminar este producto?')) {
                try {
                    products = products.filter(product => product.id !== productId);
                    saveProducts();
                    showNotification('Producto eliminado correctamente', 'success');
                } catch (error) {
                    console.error('Error al eliminar el producto:', error);
                    showNotification('Error al eliminar el producto', 'error');
                }
            }
        }

        // Inicialización cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar la búsqueda
            const searchInput = document.getElementById('searchProduct');
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    filterProducts(e.target.value);
                });
            }
            
            // Cargar todos los productos
            loadAllProducts();
            try {
                // Cargar productos desde localStorage
                const savedProducts = localStorage.getItem('inventoryProducts');
                if (savedProducts) {
                    products = JSON.parse(savedProducts);
                    console.log('Productos cargados:', products.length);
                } else {
                    console.log('No se encontraron productos guardados');
                    products = []; // Asegurarse de que products sea un array vacío si no hay datos
                }
                
                // Cargar la interfaz
                loadProducts();
                updateInventoryStats();
                
                // Configurar eventos
                setupMobileMenu();
                setupTooltips();
                
                // Cargar tasa BCV al iniciar
                fetchBCVRate();
                
                // Mostrar notificación si hay productos cargados
                if (products.length > 0) {
                    showNotification(`${products.length} productos cargados correctamente`, 'success');
                }
            } catch (error) {
                console.error('Error al inicializar la aplicación:', error);
                showNotification('Error al cargar los datos de la aplicación', 'error');
            }
        });

        // Obtener la tasa del BCV
        async function fetchBCVRate() {
            const rateInput = document.getElementById('exchangeRate');
            
            // Mostrar indicador de carga
            rateInput.disabled = true;
            rateInput.placeholder = 'Obteniendo tasa...';
            
            try {
                // Intentar obtener la tasa de la API de BCV
                const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
                if (!response.ok) {
                    throw new Error('No se pudo obtener la tasa de cambio');
                }
                
                const data = await response.json();
                // Obtener la tasa VES (Venezuelan Bolívar Soberano) desde la API
                const rate = data.rates.VES;
                
                if (rate && !isNaN(rate)) {
                    // Actualizar el campo de tasa
                    rateInput.value = rate.toFixed(2);
                    
                    // Guardar la tasa en localStorage con la fecha actual
                    const rateData = {
                        rate: rate,
                        lastUpdated: new Date().toISOString(),
                        source: 'API'
                    };
                    localStorage.setItem('bcvRate', JSON.stringify(rateData));
                    
                    // Actualizar precios
                    updateMercadoLibrePrice();
                    showNotification('Tasa BCV actualizada correctamente', 'success');
                    return rate;
                } else {
                    throw new Error('Formato de tasa inválido');
                }
            } catch (error) {
                console.error('Error al obtener la tasa del BCV:', error);
                
                // Intentar con una fuente alternativa si la primera falla
                try {
                    const altResponse = await fetch('https://api.coingecko.com/api/v3/exchange_rates');
                    if (altResponse.ok) {
                        const altData = await altResponse.json();
                        const rate = altData.rates.ves?.value;
                        
                        if (rate && !isNaN(rate)) {
                            rateInput.value = rate.toFixed(2);
                            const rateData = {
                                rate: rate,
                                lastUpdated: new Date().toISOString(),
                                source: 'CoinGecko API'
                            };
                            localStorage.setItem('bcvRate', JSON.stringify(rateData));
                            updateMercadoLibrePrice();
                            showNotification('Tasa BCV obtenida de fuente alternativa', 'info');
                            return rate;
                        }
                    }
                } catch (altError) {
                    console.error('Error con la fuente alternativa:', altError);
                }
                
                // Intentar cargar la tasa guardada en localStorage
                const savedRate = localStorage.getItem('bcvRate');
                if (savedRate) {
                    try {
                        const rateData = JSON.parse(savedRate);
                        const lastUpdated = new Date(rateData.lastUpdated);
                        const today = new Date();
                        
                        // Si la tasa guardada es del día actual, usarla
                        if (lastUpdated.toDateString() === today.toDateString()) {
                            rateInput.value = parseFloat(rateData.rate).toFixed(2);
                            updateMercadoLibrePrice();
                            showNotification(`Usando tasa guardada (${rateData.source || 'local'})`, 'info');
                            return parseFloat(rateData.rate);
                        }
                    } catch (e) {
                        console.error('Error al procesar tasa guardada:', e);
                    }
                }
                
                // Usar un valor por defecto si todo lo demás falla
                const defaultRate = 36.50;
                rateInput.value = defaultRate.toFixed(2);
                updateMercadoLibrePrice();
                
                // Guardar la tasa por defecto
                const rateData = {
                    rate: defaultRate,
                    lastUpdated: new Date().toISOString(),
                    source: 'Valor por defecto'
                };
                localStorage.setItem('bcvRate', JSON.stringify(rateData));
                
                showNotification('Usando tasa por defecto', 'warning');
                return defaultRate;
            } finally {
                // Restaurar el campo de tasa
                rateInput.disabled = false;
                rateInput.placeholder = 'Tasa BCV';
            }
        }

        // Actualizar el precio en MercadoLibre basado en el precio en USD, tasa BCV y porcentajes de precio
        function updateMercadoLibrePrice() {
            const usdPrice = parseFloat(document.getElementById('productPrice').value) || 0;
            const exchangeRate = parseFloat(document.getElementById('exchangeRate').value) || 0;
            let minPercentage = parseFloat(document.getElementById('minPricePercentage').value) || 30;
            let maxPercentage = parseFloat(document.getElementById('maxPricePercentage').value) || 50;
            
            // Asegurar que los porcentajes sean válidos
            if (isNaN(minPercentage) || minPercentage < 0) minPercentage = 30;
            if (isNaN(maxPercentage) || maxPercentage < 0) maxPercentage = 50;
            if (minPercentage > maxPercentage) minPercentage = maxPercentage - 1;
            
            // Actualizar los valores en los inputs por si fueron corregidos
            document.getElementById('minPricePercentage').value = minPercentage;
            document.getElementById('maxPricePercentage').value = maxPercentage;
            
            const priceVesInput = document.getElementById('productPriceVes');
            const priceMLInput = document.getElementById('productPriceML');
            const lastUpdateSpan = document.getElementById('mlLastUpdate');
            const usdEquivalentSpan = document.getElementById('usdEquivalent');
            const bsEquivalentSpan = document.getElementById('bsEquivalent');
            
            // Si no hay precio o tasa de cambio, limpiar campos
            if (usdPrice <= 0 || exchangeRate <= 0) {
                if (priceVesInput) priceVesInput.value = '';
                if (priceMLInput && autoCalculateML) priceMLInput.value = '';
                if (usdEquivalentSpan) usdEquivalentSpan.textContent = '$0.00';
                if (bsEquivalentSpan) bsEquivalentSpan.textContent = 'Bs. 0.00';
                return;
            }
            
            // Calcular precios
            const priceInVes = usdPrice * exchangeRate;
            
            // Actualizar campos de precio base
            if (priceVesInput) {
                priceVesInput.value = priceInVes.toLocaleString('es-VE', {minimumFractionDigits: 2, maximumFractionDigits: 2});
            }
            
            // Actualizar equivalentes
            if (usdEquivalentSpan) {
                usdEquivalentSpan.textContent = usdPrice.toLocaleString('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            if (bsEquivalentSpan) {
                bsEquivalentSpan.textContent = priceInVes.toLocaleString('es-VE', {
                    style: 'currency',
                    currency: 'VES',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            // Calcular precios mínimo y máximo basados en los porcentajes
            const minPrice = priceInVes * (1 + (minPercentage / 100));
            const maxPrice = priceInVes * (1 + (maxPercentage / 100));
            
            // Actualizar las visualizaciones de precios
            const minPriceDisplay = document.getElementById('minPriceDisplay');
            const maxPriceDisplay = document.getElementById('maxPriceDisplay');
            const priceRangeInfo = document.getElementById('priceRangeInfo');
            
            if (minPriceDisplay) {
                minPriceDisplay.textContent = minPrice.toLocaleString('es-VE', {
                    style: 'currency',
                    currency: 'VES',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            if (maxPriceDisplay) {
                maxPriceDisplay.textContent = maxPrice.toLocaleString('es-VE', {
                    style: 'currency',
                    currency: 'VES',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            // Actualizar información del rango de precios
            if (priceRangeInfo) {
                priceRangeInfo.innerHTML = `
                    Rango: <strong>${minPrice.toLocaleString('es-VE', {
                        style: 'currency',
                        currency: 'VES',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    })}</strong> (mínimo) 
                    a <strong>${maxPrice.toLocaleString('es-VE', {
                        style: 'currency',
                        currency: 'VES',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    })}</strong> (máximo)
                `;
            }
            
            // Actualizar el precio de MercadoLibre con el precio máximo exacto
            if (priceMLInput) {
                // Usar el precio máximo exacto sin redondear
                const exactMaxPrice = maxPrice;
                
                // Si está en modo automático, actualizar el valor
                if (autoCalculateML) {
                    priceMLInput.value = exactMaxPrice.toLocaleString('es-VE', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }
                
                // Mostrar información de la última actualización
                if (lastUpdateSpan) {
                    const now = new Date();
                    lastUpdateSpan.textContent = `Actualizado: ${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;
                }
                
                // Actualizar la información del rango para mostrar claramente que se usa el margen máximo
                if (priceRangeInfo) {
                    priceRangeInfo.innerHTML = `
                        <strong>Precio MercadoLibre (${maxPercentage}% margen):</strong> 
                        ${exactMaxPrice.toLocaleString('es-VE', {
                            style: 'currency',
                            currency: 'VES',
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        })}
                    `;
                }
                
                // Resaltar temporalmente el campo actualizado
                priceMLInput.classList.add('bg-green-50', 'border-green-200');
                setTimeout(() => {
                    priceMLInput.classList.remove('bg-green-50', 'border-green-200');
                }, 1000);
            }
        }

        // Alternar entre cálculo automático y manual del precio de MercadoLibre
        function toggleMLPriceInput() {
            const mlAutoCheckbox = document.getElementById('autoCalculateML');
            const mlPriceInput = document.getElementById('productPriceML');
            const mlPriceNote = document.getElementById('mlPriceNote');
            
            autoCalculateML = mlAutoCheckbox.checked;
            
            if (autoCalculateML) {
                // Cambiar a modo automático
                mlPriceInput.readOnly = true;
                mlPriceInput.classList.add('bg-gray-50');
                mlPriceNote.textContent = 'Precio sugerido con margen de ganancia';
                
                // Recalcular el precio automáticamente
                updateMercadoLibrePrice();
                
                // Mostrar notificación
                showNotification('Modo automático activado. El precio se actualizará automáticamente.', 'info');
            } else {
                // Cambiar a modo manual
                mlPriceInput.readOnly = false;
                mlPriceInput.classList.remove('bg-gray-50');
                mlPriceNote.textContent = 'Ingrese el precio manualmente';
                
                // Enfocar el campo de precio
                mlPriceInput.focus();
                
                // Mostrar notificación
                showNotification('Modo manual activado. Puede editar el precio directamente.', 'info');
            }
        }
        
        // Mostrar notificación
        function showNotification(message, type = 'info') {
            // Implementación básica - puedes reemplazar con tu sistema de notificaciones preferido
            console.log(`[${type.toUpperCase()}] ${message}`);
            
            // Opcional: Mostrar un toast o alerta en la interfaz
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg text-white ${
                type === 'error' ? 'bg-red-500' : 
                type === 'success' ? 'bg-green-500' : 
                'bg-blue-500'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // Eliminar la notificación después de 3 segundos
            setTimeout(() => {
                notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }

        // Configurar menú móvil
        function setupMobileMenu() {
            const menuButton = document.querySelector('[data-menu-button]');
            const sidebar = document.querySelector('.sidebar');
            
            if (menuButton && sidebar) {
                menuButton.addEventListener('click', () => {
                    sidebar.classList.toggle('-translate-x-full');
                    sidebar.classList.toggle('translate-x-0');
                });
            }
        }

        // Configurar tooltips
        function setupTooltips() {
            const tooltipTriggers = document.querySelectorAll('[data-tooltip]');
            
            tooltipTriggers.forEach(trigger => {
                const tooltip = document.createElement('div');
                tooltip.className = 'hidden absolute z-50 bg-gray-900 text-white text-xs rounded py-1 px-2';
                tooltip.textContent = trigger.getAttribute('data-tooltip');
                document.body.appendChild(tooltip);
                
                trigger.addEventListener('mouseenter', (e) => {
                    const rect = trigger.getBoundingClientRect();
                    tooltip.style.top = `${rect.top - 30}px`;
                    tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2)}px`;
                    tooltip.classList.remove('hidden');
                });
                
                trigger.addEventListener('mouseleave', () => {
                    tooltip.classList.add('hidden');
                });
            });
        }
    </script>
</body>
</html>
