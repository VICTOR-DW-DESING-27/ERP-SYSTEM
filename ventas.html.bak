<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Punto de Venta - ERP System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .pos-grid { display: grid; grid-template-columns: 1fr 400px; height: calc(100vh - 64px); }
        @media (max-width: 1024px) { .pos-grid { grid-template-columns: 1fr; } }
        .product-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 1rem; 
            padding: 1rem; 
            overflow-y: auto; 
            height: 100%; 
        }
        .cart-item { transition: all 0.2s; }
        .cart-item:hover { background-color: #f9fafb; }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Top Navigation -->
    <!-- Navigation will be loaded here -->
    <div id="navbar"></div>

    <!-- POS Interface -->
    <div class="pos-grid">
        <!-- Products Section -->
        <div class="bg-white overflow-hidden">
            <!-- Search and Categories -->
            <div class="p-4 border-b">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-2 md:space-y-0">
                    <div class="relative flex-1 max-w-md">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                        <input type="text" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Buscar productos...">
                    </div>
                    <div class="flex space-x-2 overflow-x-auto pb-1">
                        <button class="px-3 py-1 bg-indigo-600 text-white text-sm rounded-full whitespace-nowrap">
                            Todos
                        </button>
                        <button class="px-3 py-1 bg-white border border-gray-300 text-gray-700 text-sm rounded-full hover:bg-gray-50 whitespace-nowrap">
                            Electrónicos
                        </button>
                        <button class="px-3 py-1 bg-white border border-gray-300 text-gray-700 text-sm rounded-full hover:bg-gray-50 whitespace-nowrap">
                            Ropa
                        </button>
                        <button class="px-3 py-1 bg-white border border-gray-300 text-gray-700 text-sm rounded-full hover:bg-gray-50 whitespace-nowrap">
                            Hogar
                        </button>
                        <button class="px-3 py-1 bg-white border border-gray-300 text-gray-700 text-sm rounded-full hover:bg-gray-50 whitespace-nowrap">
                            Oficina
                        </button>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="product-grid" id="products-grid">
                <div class="col-span-full flex flex-col items-center justify-center h-64">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mb-4"></div>
                    <p class="text-gray-600">Cargando productos...</p>
                </div>
            </div>
            
            <script>
                // Load products from inventory
                async function loadProductsFromInventory() {
                    console.log('Cargando productos del inventario...');
                    try {
                        // Try to get products from inventory first
                        let inventoryData = localStorage.getItem('inventoryProducts');
                        let loadedProducts = [];
                        
                        if (inventoryData) {
                            console.log('Productos encontrados en inventoryProducts');
                            loadedProducts = JSON.parse(inventoryData).map(product => ({
                                id: product.id || product.codigo || Math.random().toString(36).substr(2, 9),
                                codigo: product.codigo || '',
                                nombre: product.nombre || product.name || 'Producto sin nombre',
                                descripcion: product.descripcion || '',
                                precio: parseFloat(product.precioVenta || product.precio || product.price || 0),
                                precioVenta: parseFloat(product.precioVenta || product.precio || product.price || 0),
                                stock: parseInt(product.stock || 0),
                                categoria: product.categoria || product.category || 'Sin categoría',
                                minStock: parseInt(product.minStock || 0),
                                proveedor: product.proveedor || '',
                                fechaActualizacion: product.fechaActualizacion || new Date().toISOString()
                            }));
                            console.log('Productos cargados de inventoryProducts:', loadedProducts.length);
                        } 
                        
                        // Also check the 'products' key as fallback
                        const productsData = localStorage.getItem('products');
                        if (productsData && (!inventoryData || loadedProducts.length === 0)) {
                            console.log('Cargando productos de la clave products...');
                            const additionalProducts = JSON.parse(productsData).map(product => ({
                                id: product.id || product.codigo || Math.random().toString(36).substr(2, 9),
                                codigo: product.codigo || '',
                                nombre: product.nombre || product.name || 'Producto sin nombre',
                                descripcion: product.descripcion || '',
                                precio: parseFloat(product.precioVenta || product.precio || product.price || 0),
                                precioVenta: parseFloat(product.precioVenta || product.precio || product.price || 0),
                                stock: parseInt(product.stock || 0),
                                categoria: product.categoria || product.category || 'Sin categoría',
                                minStock: parseInt(product.minStock || 0),
                                proveedor: product.proveedor || '',
                                fechaActualizacion: product.fechaActualizacion || new Date().toISOString()
                            }));
                            
                            // Merge products if we have both
                            loadedProducts = [...loadedProducts, ...additionalProducts];
                            console.log('Productos adicionales cargados de products:', additionalProducts.length);
                        }
                        
                        if (loadedProducts.length === 0) {
                            console.log('No se encontraron productos en el inventario');
                            return [];
                        }
                        
                        console.log(`Total de productos cargados: ${loadedProducts.length}`);
                        
                        // Update global products array
                        products = loadedProducts;
                        filteredProducts = [...products];
                        
                        // Update UI
                        updateCategories();
                        updateSaleNumber();
                        
                        return loadedProducts;
                        
                    } catch (error) {
                        console.error('Error al cargar productos del inventario:', error);
                        throw error; // Re-throw to be caught by the caller
                    }
                }

                // Initialize products when the page loads
                document.addEventListener('DOMContentLoaded', function() {
                    console.log('Inicializando módulo de ventas...');
                    
                    // Add sample products if none exist
                    if (!localStorage.getItem('inventoryProducts') || 
                        JSON.parse(localStorage.getItem('inventoryProducts')).length === 0) {
                        console.log('No hay productos en el inventario, agregando ejemplos...');
                        addSampleProducts();
                        console.log('Productos de ejemplo agregados al inventario');
                    }
                                stock: 30,
                                categoria: 'Filtros',
                                minStock: 5,
                                proveedor: 'Proveedor B',
                                fechaActualizacion: new Date().toISOString()
                            },
                            { 
                                id: 3, 
                                codigo: 'AUTO003',
                                nombre: 'Pastillas de Freno Delanteras',
                                descripcion: 'Juego de pastillas para frenos delanteros',
                                precioVenta: 45.99,
                                precioCompra: 28.50,
                                stock: 20,
                                categoria: 'Frenos',
                                minStock: 5,
                                proveedor: 'Proveedor C',
                                fechaActualizacion: new Date().toISOString()
                            }
                        ];
                        localStorage.setItem('inventoryProducts', JSON.stringify(sampleProducts));
                        console.log('Productos de ejemplo agregados al inventario');
                    }
                    
                    // Load and display products
                    loadAndDisplayProducts();
                    
                    // Add debug button
                    addDebugButton();
                });
                
                // Function to load and display products
                function loadAndDisplayProducts() {
                    const productsGrid = document.getElementById('products-grid');
                    if (!productsGrid) {
                        console.error('No se encontró el contenedor de productos');
                        return;
                    }
                    
                    // Show loading state
                    productsGrid.innerHTML = `
                        <div class="col-span-full flex flex-col items-center justify-center h-64">
                            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mb-4"></div>
                            <p class="text-gray-600">Cargando productos...</p>
                        </div>`;
                    
                    // Load products using the main inventory function
                    loadProductsFromInventory()
                        .then(products => {
                            console.log('Productos cargados:', products);
                            if (!products || products.length === 0) {
                                productsGrid.innerHTML = `
                                    <div class="col-span-full flex flex-col items-center justify-center h-64">
                                        <i class="fas fa-box-open text-gray-400 text-4xl mb-4"></i>
                                        <h3 class="text-lg font-medium text-gray-900">No hay productos disponibles</h3>
                                        <p class="text-gray-500">Agrega productos al inventario primero</p>
                                    </div>`;
                                return;
                            }
                            
                            // Render all products
                            renderProducts(products);
                        })
                        .catch(error => {
                            console.error('Error al cargar los productos:', error);
                            productsGrid.innerHTML = `
                                <div class="col-span-full flex flex-col items-center justify-center h-64">
                                    <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-4"></i>
                                    <h3 class="text-lg font-medium text-gray-900">Error al cargar productos</h3>
                                    <p class="text-gray-500">${error.message || 'Intenta recargar la página'}</p>
                                    <button onclick="loadAndDisplayProducts()" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
                                        <i class="fas fa-sync-alt mr-2"></i>Reintentar
                                    </button>
                                </div>`;
                        });
                }
                
                // Function to render products in the grid
                function renderProducts(products) {
                    const productsGrid = document.getElementById('products-grid');
                    if (!productsGrid) return;
                    
                    if (!products || products.length === 0) {
                        productsGrid.innerHTML = `
                            <div class="col-span-full flex flex-col items-center justify-center h-64">
                                <i class="fas fa-box-open text-gray-400 text-4xl mb-4"></i>
                                <h3 class="text-lg font-medium text-gray-900">No hay productos disponibles</h3>
                                <p class="text-gray-500">Agrega productos al inventario primero</p>
                            </div>`;
                        return;
                    }
                    
                    console.log('Productos a mostrar:', products); // Debug log
                    
                    // Group products by category
                    const productsByCategory = {};
                    products.forEach(product => {
                        const category = product.categoria || 'Sin categoría';
                        if (!productsByCategory[category]) {
                            productsByCategory[category] = [];
                        }
                        productsByCategory[category].push(product);
                    });
                    
                    // Generate HTML for each category
                    let html = '';
                    for (const [category, categoryProducts] of Object.entries(productsByCategory)) {
                        html += `
                        <div class="col-span-full mt-6 mb-2">
                            <h3 class="text-lg font-medium text-gray-900">${category} (${categoryProducts.length})</h3>
                            <div class="h-px bg-gray-200 mt-1 mb-4"></div>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 w-full">`;
                        
                        // Add products for this category
                        categoryProducts.forEach(product => {
                            // Ensure all required fields have default values
                            const productName = product.nombre || 'Producto sin nombre';
                            const productCode = product.codigo || 'N/A';
                            const price = parseFloat(product.precioVenta || 0).toFixed(2);
                            const stock = parseInt(product.stock || 0);
                            const isOutOfStock = stock <= 0;
                            
                            html += `
                            <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200">
                                <div class="p-4 h-full flex flex-col">
                                    <div class="flex-1">
                                        <h4 class="font-medium text-gray-900 truncate" title="${productName}">${productName}</h4>
                                        <p class="text-sm text-gray-500">Código: ${productCode}</p>
                                        ${product.descripcion ? `<p class="text-sm text-gray-600 mt-1 line-clamp-2">${product.descripcion}</p>` : ''}
                                        <div class="mt-2">
                                            <span class="text-lg font-bold text-gray-900">$${price}</span>
                                            <span class="text-xs text-gray-500 ml-1">+ IVA</span>
                                        </div>
                                    </div>
                                    <div class="mt-4">
                                        <div class="flex justify-between items-center mb-2">
                                            <span class="text-sm font-medium text-gray-700">Disponible:</span>
                                            ${isOutOfStock ? 
                                                `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                                    Agotado
                                                </span>` : 
                                                `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                                    ${stock} en stock
                                                </span>`
                                            }
                                        </div>
                                        <button onclick="addToCart('${product.id}')" 
                                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${isOutOfStock ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500'}"
                                                ${isOutOfStock ? 'disabled' : ''}>
                                            ${isOutOfStock ? 'Sin stock' : 'Agregar al carrito'}
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                        });
                        
                        html += '</div>'; // Close category grid
                    }
                    
                    // Add a summary of loaded products
                    html += `
                    <div class="col-span-full mt-8 p-4 bg-gray-50 rounded-lg">
                        <p class="text-sm text-gray-600">Mostrando <span class="font-medium">${products.length}</span> productos en total</p>
                    </div>`;
                    
                    productsGrid.innerHTML = html;
                }
            </script>
        </div>

        <!-- Cart Section -->
        <div class="bg-gray-50 border-l border-gray-200 flex flex-col">
            <div class="p-4 border-b">
                <h2 class="text-lg font-medium text-gray-900">Carrito de Compra</h2>
                <div class="mt-1 flex items-center text-sm text-gray-500">
                    <span>Venta #12345</span>
                    <span class="mx-1">•</span>
                    <span>Hoy</span>
                </div>
            </div>

            <!-- Customer Info -->
            <div class="p-4 border-b">
                <div class="flex justify-between items-center">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Cliente</p>
                        <p class="text-sm text-gray-900">Cliente General</p>
                    </div>
                    <button class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                        Cambiar
                    </button>
                </div>
            </div>

            <!-- Cart Items -->
            <div class="flex-1 overflow-y-auto">
                <div class="divide-y divide-gray-200" id="cart-items">
                    <!-- Cart items will be loaded here by JavaScript -->
                    <div class="text-center py-12 text-gray-500">
                        <i class="fas fa-shopping-cart text-4xl mb-2"></i>
                        <p>No hay productos en el carrito</p>
                    </div>
                </div>
            </div>

            <!-- Cart Summary -->
            <div class="border-t border-gray-200 p-4">
                <div class="space-y-2">
                    <div class="flex justify-between text-sm text-gray-600">
                        <span>Subtotal</span>
                        <span id="subtotal">$0.00</span>
                    </div>
                    <div class="flex justify-between text-sm text-gray-600">
                        <span>Impuestos (16%)</span>
                        <span id="taxes">$0.00</span>
                    </div>
                    <div class="flex justify-between text-base font-medium text-gray-900 pt-2 border-t border-gray-200">
                        <span>Total</span>
                        <span id="total">$0.00</span>
                    </div>
                </div>

                <div class="mt-4 space-y-2">
                    <button class="w-full bg-indigo-600 text-white py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Cobrar
                    </button>
                    <button class="w-full bg-white text-gray-700 py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Guardar Venta
                    </button>
                    <button class="w-full bg-white text-red-600 py-2 px-4 border border-red-300 rounded-md shadow-sm text-sm font-medium hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Cancelar Venta
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let cart = [];
        
        // Function to add sample products if none exist
        function addSampleProducts() {
            if (!localStorage.getItem('inventoryProducts') && !localStorage.getItem('products')) {
                console.log('Agregando productos de ejemplo...');
                const sampleProducts = [
                    {
                        id: 1,
                        codigo: 'AUTO001',
                        nombre: 'Aceite de Motor 5W-30',
                        descripcion: 'Aceite sintético para motor',
                        precioVenta: 25.99,
                        stock: 50,
                        categoria: 'Lubricantes',
                        minStock: 10,
                        proveedor: 'Proveedor A'
                    },
                    {
                        id: 2,
                        codigo: 'AUTO002',
                        nombre: 'Filtro de Aire',
                        descripcion: 'Filtro de aire de alta eficiencia',
                        precioVenta: 15.50,
                        stock: 30,
                        categoria: 'Filtros',
                        minStock: 5,
                        proveedor: 'Proveedor B'
                    },
                    {
                        id: 3,
                        codigo: 'AUTO003',
                        nombre: 'Pastillas de Freno Delanteras',
                        descripcion: 'Juego de pastillas para frenos delanteros',
                        precioVenta: 45.99,
                        stock: 20,
                        categoria: 'Frenos',
                        minStock: 5,
                        proveedor: 'Proveedor C'
                    },
                    {
                        id: 4,
                        codigo: 'AUTO004',
                        nombre: 'Batería 12V 60Ah',
                        descripcion: 'Batería para automóvil',
                        precioVenta: 120.00,
                        stock: 15,
                        categoria: 'Eléctrico',
                        minStock: 3,
                        proveedor: 'Proveedor A'
                    },
                    {
                        id: 5,
                        codigo: 'AUTO005',
                        nombre: 'Lámpara H7',
                        descripcion: 'Lámpara halógena H7',
                        precioVenta: 8.99,
                        stock: 100,
                        categoria: 'Iluminación',
                        minStock: 20,
                        proveedor: 'Proveedor B'
                    }
                ];
                
                localStorage.setItem('inventoryProducts', JSON.stringify(sampleProducts));
                console.log('Productos de ejemplo agregados al inventario');
                // Recargar la página para mostrar los productos
                location.reload();
            }
        }
        
        // Function to check and display products
        function verProductos() {
            const products = JSON.parse(localStorage.getItem('inventoryProducts') || '[]');
            const debugDiv = document.createElement('div');
            debugDiv.style.position = 'fixed';
            debugDiv.style.bottom = '10px';
            debugDiv.style.left = '10px';
            debugDiv.style.backgroundColor = 'white';
            debugDiv.style.padding = '10px';
            debugDiv.style.border = '2px solid red';
            debugDiv.style.zIndex = '9999';
            
            let html = '<h3>Productos en el sistema:</h3>';
            if (products.length > 0) {
                html += '<ul>';
                products.forEach(p => {
                    html += `<li>${p.nombre || p.name} - Stock: ${p.stock} - $${p.precioVenta || p.price}</li>`;
                });
                html += '</ul>';
            } else {
                html += '<p>No hay productos en el inventario</p>';
            }
            
            debugDiv.innerHTML = html;
            document.body.appendChild(debugDiv);
            
            console.log('Productos en el sistema:', products);
        }
        
        // Add debug button
        function addDebugButton() {
            const btn = document.createElement('button');
            btn.textContent = 'Ver Productos';
            btn.style.position = 'fixed';
            btn.style.bottom = '10px';
            btn.style.right = '10px';
            btn.style.padding = '10px';
            btn.style.backgroundColor = '#4F46E5';
            btn.style.color = 'white';
            btn.style.border = 'none';
            btn.style.borderRadius = '4px';
            btn.style.cursor = 'pointer';
            btn.style.zIndex = '9999';
            btn.onclick = verProductos;
            document.body.appendChild(btn);
        }

        // Load products when DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded, initializing products...');
            loadProductsFromInventory().then(products => {
                console.log('Products loaded successfully:', products);
                renderProducts(products);
            }).catch(error => {
                console.error('Error loading products:', error);
            });
            addDebugButton();
        });
        
        // Debug function to check current products
        function checkProducts() {
            console.log('=== PRODUCTOS EN EL SISTEMA ===');
            
            // Check localStorage for products
            const inventoryProducts = localStorage.getItem('inventoryProducts');
            const regularProducts = localStorage.getItem('products');
            
            console.log('Productos en inventoryProducts:', inventoryProducts ? JSON.parse(inventoryProducts) : 'No hay productos');
            console.log('Productos en products:', regularProducts ? JSON.parse(regularProducts) : 'No hay productos');
            
            // Show products on screen for debugging
            const debugDiv = document.createElement('div');
            debugDiv.style.position = 'fixed';
            debugDiv.style.bottom = '10px';
            debugDiv.style.left = '10px';
            debugDiv.style.backgroundColor = 'white';
            debugDiv.style.padding = '10px';
            debugDiv.style.border = '1px solid #ccc';
            debugDiv.style.zIndex = '1000';
            debugDiv.style.maxHeight = '300px';
            debugDiv.style.overflow = 'auto';
            
            let debugHTML = '<h3>Productos en el sistema:</h3>';
            
            if (inventoryProducts) {
                const products = JSON.parse(inventoryProducts);
                debugHTML += `<p>Total en inventario: ${products.length}</p>`;
                debugHTML += '<ul>';
                products.slice(0, 5).forEach(p => {
                    debugHTML += `<li>${p.nombre || p.name} - Stock: ${p.stock}</li>`;
                });
                if (products.length > 5) debugHTML += '<li>...</li>';
                debugHTML += '</ul>';
            } else {
                debugHTML += '<p>No se encontraron productos en el inventario</p>';
            }
            
            debugDiv.innerHTML = debugHTML;
            document.body.appendChild(debugDiv);
            
            console.log('Productos en el sistema:', products);
        }
        let products = [];
        let filteredProducts = [];
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Loading products...');
            loadProductsFromInventory()
                .then(products => {
                    console.log('Products loaded:', products);
                    renderProducts(products);
                })
                .catch(error => {
                    console.error('Error loading products:', error);
                    const grid = document.getElementById('products-grid');
                    if (grid) {
                        grid.innerHTML = `
                            <div class="col-span-full flex flex-col items-center justify-center h-64">
                                <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-4"></i>
                                <h3 class="text-lg font-medium text-gray-900">Error al cargar productos</h3>
                                <p class="text-gray-500">${error.message || 'Intenta recargar la página'}</p>
                                <button onclick="location.reload()" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
                                    Recargar
                                </button>
                            </div>`;
                    }
                });
        });
        let currentSaleId = 'V' + Math.random().toString(36).substr(2, 8).toUpperCase();
        
        // DOM Elements
        const productsGrid = document.getElementById('products-grid');
        const cartItems = document.getElementById('cart-items');
        const subtotalEl = document.getElementById('subtotal');
        const totalEl = document.getElementById('total');
        const taxesEl = document.getElementById('taxes');
        const searchInput = document.querySelector('input[type="text"]');
        
        // Debug function to check localStorage
        function debugLocalStorage() {
            console.log('Checking localStorage...');
            const inventoryData = localStorage.getItem('inventoryProducts');
            const productsData = localStorage.getItem('products');
            
            console.log('inventoryProducts:', inventoryData ? JSON.parse(inventoryData) : 'No inventoryProducts found');
            console.log('products:', productsData ? JSON.parse(productsData) : 'No products found');
            
            if (!inventoryData && !productsData) {
                console.warn('No product data found in localStorage. Please add products to inventory first.');
                // Add sample data for testing if no data exists
                const sampleProducts = [
                    { id: 1, codigo: 'PROD001', nombre: 'Producto de Prueba 1', precioVenta: 100, stock: 10, categoria: 'General', minStock: 5 },
                    { id: 2, codigo: 'PROD002', nombre: 'Producto de Prueba 2', precioVenta: 150, stock: 5, categoria: 'General', minStock: 3 }
                ];
                localStorage.setItem('products', JSON.stringify(sampleProducts));
                console.log('Added sample products to localStorage');
                return sampleProducts;
            }
            
            return null;
        }
        
        // Update categories from products
        function updateCategories() {
            const categoryButtons = document.querySelector('.category-buttons');
            if (!categoryButtons) return;
            
            const categorySet = new Set();
            products.forEach(product => categorySet.add(product.category));
        
        // Update categories from products
        function updateCategories() {
            const categoryButtons = document.querySelector('.category-buttons');
            if (!categoryButtons) return;
            
            const categorySet = new Set();
            products.forEach(product => categorySet.add(product.category));
            
            // Create category buttons
            let buttons = `
                <button onclick="filterByCategory('')" class="px-3 py-1 bg-indigo-600 text-white text-sm rounded-full whitespace-nowrap">
                    Todos
                </button>`;
                
            categorySet.forEach(category => {
                buttons += `
                <button onclick="filterByCategory('${category}')" class="px-3 py-1 bg-white border border-gray-300 text-gray-700 text-sm rounded-full hover:bg-gray-50 whitespace-nowrap">
                    ${category}
                </button>`;
            });
            
            categoryButtons.innerHTML = buttons;
        }
        
        // Render products in the grid
        function renderProducts(productsToRender) {
            if (!productsToRender || productsToRender.length === 0) {
                productsToRender = [];
            }
            console.log('Rendering products:', productsToRender);
            const grid = document.getElementById('products-grid');
            if (!grid) {
                console.error('No se encontró el grid de productos');
                return;
            }
            
            // Clear previous content
            grid.innerHTML = '';
            
            if (!productsToRender || productsToRender.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full flex flex-col items-center justify-center h-64">
                        <i class="fas fa-box-open text-gray-400 text-5xl mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900">No se encontraron productos</h3>
                        <p class="text-gray-500">Intenta con otro término de búsqueda</p>
                    </div>`;
                console.log('No hay productos para mostrar');
                return;
            }
            
            // Group products by category
            const productsByCategory = productsToRender.reduce((acc, product) => {
                if (!acc[product.category]) {
                    acc[product.category] = [];
                }
                acc[product.category].push(product);
                return acc;
            }, {});
            
            // Generate HTML for each category and its products
            let html = '';
            for (const [category, categoryProducts] of Object.entries(productsByCategory)) {
                html += `
                <div class="col-span-full mt-4 mb-2">
                    <h3 class="text-lg font-medium text-gray-900">${category}</h3>
                    <div class="h-px bg-gray-200 mt-1"></div>
                </div>`;
                
                html += categoryProducts.map(product => `
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200" 
                     data-product-id="${product.id}">
                    <div class="p-4">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h4 class="font-medium text-gray-900 truncate">${product.name}</h4>
                                <p class="text-sm text-gray-500">${product.code || 'Sin código'}</p>
                                <div class="mt-2">
                                    <span class="text-sm font-medium text-gray-900">$${product.price.toFixed(2)}</span>
                                    <span class="text-xs text-gray-500 ml-1">+ IVA</span>
                                </div>
                            </div>
                            <div class="ml-2">
                                ${product.stock > 0 ? 
                                    `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                        ${product.stock} en stock
                                    </span>` : 
                                    `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                        Agotado
                                    </span>`
                                }
                            </div>
                        </div>
                        <button onclick="addToCart('${product.id}')" 
                                class="mt-3 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${product.stock === 0 ? 'opacity-50 cursor-not-allowed' : ''}"
                                ${product.stock === 0 ? 'disabled' : ''}>
                            Agregar al carrito
                        </button>
                    </div>
                </div>`).join('');
            }
            
            // Add products to grid
            grid.innerHTML = html;
            console.log('Productos renderizados correctamente');
            
            // If still no products, show a message
            if (productsToRender.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full flex flex-col items-center justify-center h-64">
                        <i class="fas fa-box-open text-gray-400 text-5xl mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900">No hay productos disponibles</h3>
                        <p class="text-gray-500">Agrega productos al inventario primero</p>
                    </div>`;
            }
        }
                return `
                    <button 
                        onclick="filterByCategory('${category}')" 
                        class="category-btn ${isActive ? 'active' : ''}"
                    >
                        ${category}
                    </button>
                `;
            }).join('');
            
        
        // Filter products by category
        function filterByCategory(category) {
            if (category) {
                filteredProducts = products.filter(p => p.category === category);
            } else {
            
            console.log(`${products.length} productos cargados correctamente`);
            
            // Initialize filtered products and categories
            filteredProducts = [...products];
            updateCategories();
            renderProducts();
        // Show notification
        function showNotification(type, title, message) {
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 p-4 rounded-md shadow-lg text-white ${
                type === 'error' ? 'bg-red-500' : 'bg-green-500'
            }`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas ${type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle'} mr-2"></i>
                    <div>
                        <p class="font-medium">${title}</p>
                        <p class="text-sm opacity-90">${message}</p>
                    </div>
                </div>
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 5000);
        }
        
        // Add product to cart
        function addToCart(productId, quantity = 1) {
            const product = products.find(p => p.id === productId);
            if (!product) {
                showNotification('error', 'Error', 'Producto no encontrado');
                return;
            }
            
            // Check if product is already in cart
            const existingItem = cart.find(item => item.id === productId);
            const newQuantity = (existingItem?.quantity || 0) + quantity;
            
            // Validate stock
            if (newQuantity > product.stock) {
                showNotification('error', 'Stock insuficiente', 'No hay suficiente stock disponible');
                return;
            }
            
            if (existingItem) {
                // Update existing item
                existingItem.quantity = newQuantity;
                showNotification('success', 'Actualizado', `${product.name} actualizado en el carrito`);
            } else {
                // Add new item to cart
                cart.push({
                    id: product.id,
                    code: product.code,
                    name: product.name,
                    price: product.price,
                    taxRate: product.taxRate,
                    quantity: quantity,
                    stock: product.stock
                });
                showNotification('success', 'Agregado', `${product.name} agregado al carrito`);
            }
            
            updateCart();
            
            // Visual feedback
            const productElement = document.querySelector(`[data-product-id="${productId}"]`);
            if (productElement) {
                productElement.classList.add('ring-2', 'ring-indigo-500');
                setTimeout(() => {
                    productElement.classList.remove('ring-2', 'ring-indigo-500');
                }, 1000);
            }
        }
        
        // Update cart display
        function updateCart() {
            if (!cartItems) return;
            
            if (cart.length === 0) {
                cartItems.innerHTML = `
                    <div class="text-center py-12 text-gray-500">
                        <i class="fas fa-shopping-cart text-4xl mb-2"></i>
                        <p>No hay productos en el carrito</p>
                    </div>`;
                
                subtotalEl.textContent = '$0.00';
                taxesEl.textContent = '$0.00';
                totalEl.textContent = '$0.00';
                return;
            }
            
            // Calculate totals
            let subtotal = 0;
            let taxes = 0;
            
            const cartHTML = cart.map(item => {
                const itemTotal = item.price * item.quantity;
                const itemTax = itemTotal * item.taxRate;
                
                subtotal += itemTotal;
                taxes += itemTax;
                
                return `
                <div class="cart-item py-3 px-4 border-b border-gray-200">
                    <div class="flex justify-between">
                        <div class="flex-1">
                            <h4 class="font-medium text-gray-900">${item.name}</h4>
                            <p class="text-sm text-gray-500">${item.code || 'Sin código'}</p>
                            <div class="mt-1">
                                <span class="text-sm font-medium text-gray-900">$${item.price.toFixed(2)}</span>
                                <span class="text-xs text-gray-500 ml-1">c/u</span>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button onclick="updateQuantity('${item.id}', ${item.quantity - 1})" 
                                    class="w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200">
                                <i class="fas fa-minus text-xs"></i>
                            </button>
                            <span class="w-8 text-center">${item.quantity}</span>
                            <button onclick="updateQuantity('${item.id}', ${item.quantity + 1})" 
                                    class="w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200">
                                <i class="fas fa-plus text-xs"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mt-2 flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            ${item.quantity} × $${item.price.toFixed(2)} = 
                            <span class="font-medium">$${(item.price * item.quantity).toFixed(2)}</span>
                        </span>
                        <button onclick="removeFromCart('${item.id}')" 
                                class="text-red-500 hover:text-red-700">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>`;
            }).join('');
            
            cartItems.innerHTML = cartHTML;
            
            // Update totals
            const total = subtotal + taxes;
            subtotalEl.textContent = `$${subtotal.toFixed(2)}`;
            taxesEl.textContent = `$${taxes.toFixed(2)}`;
            totalEl.textContent = `$${total.toFixed(2)}`;
        }
        
        // Update item quantity
        function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) {
                removeFromCart(productId);
                return;
            }
            
            const item = cart.find(item => item.id === productId);
            if (!item) return;
            
            const product = products.find(p => p.id === productId);
            if (newQuantity > (product?.stock || 0)) {
                showNotification('error', 'Stock insuficiente', 'No hay suficiente stock disponible');
                return;
            }
            
            item.quantity = newQuantity;
            updateCart();
        }
        
        // Remove item from cart
        function removeFromCart(productId) {
            const index = cart.findIndex(item => item.id === productId);
            if (index !== -1) {
                cart.splice(index, 1);
                updateCart();
                showNotification('info', 'Eliminado', 'Producto eliminado del carrito');
            }
        }
        
        // Complete sale
        function completeSale() {
            if (cart.length === 0) {
                showNotification('warning', 'Carrito vacío', 'Agrega productos al carrito antes de cobrar');
                return;
            }
            
            // Here you would typically send the sale to your backend
            // For now, we'll just show a success message and clear the cart
            const total = parseFloat(totalEl.textContent.replace('$', ''));
            showNotification('success', 'Venta completada', `Total: $${total.toFixed(2)}`);
            
            // Clear the cart
            cart = [];
            updateCart();
            
            // Generate a new sale ID
            currentSaleId = 'V' + Math.random().toString(36).substr(2, 8).toUpperCase();
            updateSaleNumber();
            
            // Clear search
            if (searchInput) {
                searchInput.value = '';
            }
            
            // Show loading state
            productsGrid.innerHTML = `
                <div class="col-span-full flex flex-col items-center justify-center h-64">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mb-4"></div>
                    <p class="text-gray-600">Cargando productos...</p>
                </div>`;
            
            // Load products and update UI
            loadProductsFromInventory().then(() => {
                updateCart();
                
                // Set up search input
                if (searchInput) {
                    searchInput.addEventListener('input', (e) => searchProducts(e.target.value));
                }
                
                // Set up category buttons
                const categoryButtons = document.querySelector('.category-buttons');
                if (categoryButtons) {
                    categoryButtons.addEventListener('click', (e) => {
                        if (e.target.matches('button')) {
                            const buttons = categoryButtons.querySelectorAll('button');
                            buttons.forEach(btn => {
                                if (btn === e.target) {
                                    btn.classList.remove('bg-white', 'border-gray-300', 'text-gray-700');
                                    btn.classList.add('bg-indigo-600', 'text-white');
                                } else {
                                    btn.classList.remove('bg-indigo-600', 'text-white');
                                    btn.classList.add('bg-white', 'border-gray-300', 'text-gray-700');
                                }
                            });
                        }
                    });
                }
                
                // Set up checkout button
                const checkoutBtn = document.querySelector('button:contains("Cobrar")');
                if (checkoutBtn) {
                
                // Set up cancel sale button
                const cancelSaleBtn = document.querySelector('button:contains("Cancelar Venta")');
                if (cancelSaleBtn) {
                    cancelSaleBtn.addEventListener('click', () => {
                        if (confirm('¿Estás seguro de que deseas cancelar la venta actual?')) {
                            cart = [];
                            updateCart();
                            showNotification('info', 'Venta cancelada', 'La venta ha sido cancelada');
                        }
                    });
                }
                
                console.log('POS initialized successfully');
            }).catch(error => {
                console.error('Error initializing POS:', error);
                productsGrid.innerHTML = `
                    <div class="col-span-full flex flex-col items-center justify-center h-64 p-4 text-center">
                        <i class="fas fa-exclamation-triangle text-yellow-500 text-4xl mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900">Error al cargar los productos</h3>
                        <p class="text-gray-600 mb-4">${error.message || 'Intenta recargar la página'}</p>
                        <button onclick="loadProductsFromInventory()" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
                            <i class="fas fa-sync-alt mr-2"></i>Reintentar
                        </button>
                    </div>`;
            });
            
            // Set up checkout button
            const checkoutBtn = document.querySelector('button:contains("Cobrar")');
            if (checkoutBtn) {
                checkoutBtn.addEventListener('click', completeSale);
            }
            
            // Set up save sale button
            const saveSaleBtn = document.querySelector('button:contains("Guardar Venta")');
            if (saveSaleBtn) {
                saveSaleBtn.addEventListener('click', () => {
                    if (cart.length === 0) {
                        showNotification('warning', 'Carrito vacío', 'No hay productos para guardar');
                        return;
                    }
                    showNotification('info', 'Venta guardada', 'La venta se ha guardado correctamente');
                });
            }
            
            // Set up cancel sale button
            const cancelSaleBtn = document.querySelector('button:contains("Cancelar Venta")');
            if (cancelSaleBtn) {
                cancelSaleBtn.addEventListener('click', () => {
                    if (confirm('¿Estás seguro de que deseas cancelar la venta actual?')) {
                        cart = [];
                        updateCart();
                        showNotification('info', 'Venta cancelada', 'La venta ha sido cancelada');
                    }
                });
            }
            }
        });
    </script>
</body>
</html>
